--- linux-source-2.6.31-orig/drivers/input/input.c	2009-12-08 04:01:06.000000000 +0000
+++ linux-source-2.6.31-bukbd/drivers/input/input.c	2009-12-31 10:39:41.000000000 +0000
@@ -29,6 +29,83 @@
 
 #define INPUT_DEVICES	256
 
+/** BUKBD **/
+#define BUKBD_NUM_KEYS 5
+#define BUKBD_MAX_TRANSFORMATIONS 16
+#define BUKBD_MAX_COMBOS 16
+#define BUKBD_MAX_COMBO_LENGTH 8
+
+static unsigned int bukbd_state = 0;
+static unsigned int bukbd_f0 = 0;
+static unsigned int bukbd_f0_index = 0;
+static unsigned int bukbd_x0 = 0;
+
+struct bukbd_key {
+	unsigned int key;
+	unsigned int modifier;
+	unsigned int num_trans;
+	struct transformation {
+		unsigned int key;
+		unsigned int to;
+	}transformations[BUKBD_MAX_TRANSFORMATIONS];
+	unsigned int num_combos;
+	struct combo {
+		unsigned int key;
+		unsigned int length;
+		struct combo_event {
+			unsigned int down;
+			unsigned int key;
+		}events[BUKBD_MAX_COMBO_LENGTH];
+	}combos[BUKBD_MAX_COMBOS];
+};
+
+struct bukbd_key bukbd_keys[BUKBD_NUM_KEYS] = {
+	{KEY_F, 0, 
+		10, 	{
+			{KEY_J, KEY_LEFT}, 
+			{KEY_K, KEY_DOWN}, 
+			{KEY_L, KEY_RIGHT}, 
+			{KEY_I, KEY_UP}, 
+			{KEY_U, KEY_PAGEUP}, 
+			{KEY_O, KEY_PAGEDOWN}, 
+			{KEY_H, KEY_HOME},
+			{KEY_SEMICOLON, KEY_END},
+			{KEY_D, KEY_LEFTSHIFT},
+			{KEY_S, KEY_LEFTCTRL}
+			},
+		0, 	{}
+	},
+	{KEY_D, 0,  
+		3, 	{
+			{KEY_J, KEY_BACKSPACE}, 
+			{KEY_L, KEY_DELETE}, 
+			{KEY_S, KEY_LEFTCTRL}
+			},
+		4, 	{
+			{KEY_K, 4, {{1, KEY_END}, {0, KEY_END}, {1, KEY_ENTER}, {0, KEY_ENTER}}},
+			{KEY_I, 6, {{1, KEY_HOME}, {0, KEY_HOME}, {1, KEY_ENTER}, {0, KEY_ENTER}, {1, KEY_UP}, {0, KEY_UP}}},
+			{KEY_U, 8, {{1, KEY_HOME}, {0, KEY_HOME}, {1, KEY_LEFTSHIFT}, {1, KEY_END}, {0, KEY_END}, {0, KEY_LEFTSHIFT}, {1, KEY_DELETE}, {0, KEY_DELETE}}},
+			{KEY_O, 6, {{1, KEY_LEFTSHIFT}, {1, KEY_END}, {0, KEY_END}, {0, KEY_LEFTSHIFT}, {1, KEY_DELETE}, {0, KEY_DELETE}}}
+			}
+	},
+	{KEY_J, 0,  
+		0, 	{},
+		3, 	{
+			{KEY_F, 4, {{1, KEY_LEFTCTRL}, {1, KEY_V}, {0, KEY_V}, {0, KEY_LEFTCTRL}}},
+			{KEY_D, 4, {{1, KEY_LEFTCTRL}, {1, KEY_C}, {0, KEY_C}, {0, KEY_LEFTCTRL}}},
+			{KEY_S, 4, {{1, KEY_LEFTCTRL}, {1, KEY_X}, {0, KEY_X}, {0, KEY_LEFTCTRL}}}
+			}
+	},
+	{KEY_G, KEY_LEFTMETA, 
+		0, {},
+		0, {}
+	},
+	{KEY_H, KEY_LEFTMETA, 
+		0, {},
+		0, {}
+	}
+};
+
 /*
  * EV_ABS events which should not be cached are listed here.
  */
@@ -167,7 +244,7 @@
 #define INPUT_PASS_TO_DEVICE	2
 #define INPUT_PASS_TO_ALL	(INPUT_PASS_TO_HANDLERS | INPUT_PASS_TO_DEVICE)
 
-static void input_handle_event(struct input_dev *dev,
+static void original_input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = INPUT_IGNORE_EVENT;
@@ -293,6 +370,171 @@
 		input_pass_event(dev, type, code, value);
 }
 
+/* TODO: Maybe modify this to test all keys */
+static int all_keys_up(struct input_dev *dev)
+{
+	unsigned int i, j;
+
+	//All modifier keys
+	if(test_bit(KEY_LEFTCTRL, dev->key) ||
+		test_bit(KEY_RIGHTCTRL, dev->key) ||
+		test_bit(KEY_LEFTALT, dev->key) ||
+		test_bit(KEY_RIGHTALT, dev->key) ||
+		test_bit(KEY_LEFTMETA, dev->key) ||
+		test_bit(KEY_RIGHTMETA, dev->key) ||
+		test_bit(KEY_LEFTSHIFT, dev->key) ||
+		test_bit(KEY_RIGHTSHIFT, dev->key))
+		return 0;
+
+	//Keys that take place in transformations
+	for(i=0; i < BUKBD_NUM_KEYS; i++) {
+		if(test_bit(bukbd_keys[i].key, dev->key))
+			return 0;
+		for(j=0; j < bukbd_keys[i].num_trans; j++)
+			if(test_bit(bukbd_keys[i].transformations[j].key, dev->key) || test_bit(bukbd_keys[i].transformations[j].to, dev->key))
+				return 0;		
+	}
+
+	return 1;
+}
+
+static int is_bukbd_key(unsigned int keycode)
+{
+	unsigned int i;
+
+	for(i=0;i<BUKBD_NUM_KEYS;i++) {
+		if(keycode == bukbd_keys[i].key) {
+			bukbd_f0_index = i;
+			bukbd_f0 = keycode;
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
+static void transform_input_handle_event(struct input_dev *dev,
+			       		unsigned int type, unsigned int keycode, int down)
+{
+	unsigned int i,j;
+
+	/* Combos are only activated when a key is pressed, not on release */
+	if(down == 1) {
+		for(i = 0; i < bukbd_keys[bukbd_f0_index].num_combos; i++){
+			if(bukbd_keys[bukbd_f0_index].combos[i].key == keycode) {
+				for(j=0; j < bukbd_keys[bukbd_f0_index].combos[i].length; j++) {
+					original_input_handle_event(dev, 
+								type, 
+								bukbd_keys[bukbd_f0_index].combos[i].events[j].key,
+								bukbd_keys[bukbd_f0_index].combos[i].events[j].down);
+				}
+				return;
+			}
+		}
+	}
+
+	/* If no combo was activated, try a simple transformation*/
+	for(i = 0; i < bukbd_keys[bukbd_f0_index].num_trans; i++) {
+		if(bukbd_keys[bukbd_f0_index].transformations[i].key == keycode) {
+			original_input_handle_event(dev, type, bukbd_keys[bukbd_f0_index].transformations[i].to, down);
+			return;
+		}
+	}
+	
+	/* No transformation, send the original event */
+	original_input_handle_event(dev, type, keycode, down);
+}
+
+static void modifier_key_event(struct input_dev *dev, unsigned int down)
+{
+	unsigned int m = bukbd_keys[bukbd_f0_index].modifier;
+	
+	if(m != 0)
+		original_input_handle_event(dev, EV_KEY, m, down);
+}
+
+static void press_modifier_key(struct input_dev *dev)
+{
+	modifier_key_event(dev, 1);
+}
+
+static void release_modifier_key(struct input_dev *dev)
+{
+	modifier_key_event(dev, 0);
+}
+
+static void input_handle_event(struct input_dev *dev,
+			       unsigned int type, unsigned int keycode, int down)
+{
+	if(type != EV_KEY)
+		original_input_handle_event(dev, type, keycode, down);
+	else {
+		switch(bukbd_state) {
+			case 0:
+				if(down == 1 && is_bukbd_key(keycode) && all_keys_up(dev)) {
+					bukbd_state = 1;						
+				} else {
+					original_input_handle_event(dev, type, keycode, down);
+				}
+				break;
+			case 1:
+				if(down == 2) { 
+				}else if(down == 0 && keycode == bukbd_f0) {
+					bukbd_state = 0;
+					original_input_handle_event(dev, type, keycode, 1);
+					original_input_handle_event(dev, type, keycode, 0);
+				}else if(down == 1 && keycode == bukbd_f0) {
+					bukbd_state = 3;
+					press_modifier_key(dev); 
+				}else if(down == 1) {
+					bukbd_state = 2;
+					bukbd_x0 = keycode;					
+				}else {
+					original_input_handle_event(dev, type, keycode, down);	
+				}
+				break;
+			case 2:
+				if(down == 0 && keycode == bukbd_f0) {
+					bukbd_state = 0;
+					original_input_handle_event(dev, type, keycode, 1);
+					original_input_handle_event(dev, type, bukbd_x0, 1);
+					original_input_handle_event(dev, type, keycode, 0);
+				} else if(down == 1 && keycode == bukbd_x0) {
+					bukbd_state = 3;
+					press_modifier_key(dev);
+					transform_input_handle_event(dev, type, bukbd_x0, 1);
+					transform_input_handle_event(dev, type, bukbd_x0, 2);
+				} else  {
+					bukbd_state = 3;
+					press_modifier_key(dev);
+					transform_input_handle_event(dev, type, bukbd_x0, 1);
+					transform_input_handle_event(dev, type, keycode, down);
+				}
+				break;				
+			case 3:
+				if(down == 0 && keycode == bukbd_f0) {		
+					release_modifier_key(dev);
+					if(all_keys_up(dev))
+						bukbd_state = 0;
+					else
+						bukbd_state = 4;						
+				}else if(down > 0 && keycode == bukbd_f0) { 
+					/* ignore */
+				}else {
+					transform_input_handle_event(dev, type, keycode, down);
+				}
+				break;
+			case 4:
+				transform_input_handle_event(dev, type, keycode, down);
+				/* exit bukbd mode */
+				if(down == 0 && all_keys_up(dev)) {
+					bukbd_state = 0;
+				}				
+				break;
+		}				
+	}
+}
+
 /**
  * input_event() - report new input event
  * @dev: device that generated the event
